---
alwaysApply: true
---

# Domain-Driven Design (DDD) and Best Practices Rule

This repository must follow Domain-Driven Design (DDD) principles across all modules and layers. The following guidelines apply:

- The codebase should be organized by domain modules, each with its own domain, application, infrastructure, and presentation layers when applicable.
- All business logic must reside in the domain layer (entities, value objects, domain services, aggregates).
- The application layer should orchestrate use cases, delegating business logic to the domain layer and using repositories, buses, and external services via ports/interfaces.
- Infrastructure concerns (persistence, external APIs, frameworks) must be isolated in the infrastructure layer, implementing the ports/interfaces defined in the application or domain layers.
- Presentation (controllers, HTTP handlers, UI) must not contain business logic, only input/output mapping and orchestration.
- All code must follow SOLID principles, be modular, and be open for extension but closed for modification.
- Tests must be written for all critical business logic, use cases, and integration points, following the same modular and scalable structure as the code.
- Folder and file naming must be consistent, clear, and reflect the domain language (ubiquitous language).

This rule ensures the codebase remains scalable, maintainable, and aligned with DDD and software engineering best practices.
